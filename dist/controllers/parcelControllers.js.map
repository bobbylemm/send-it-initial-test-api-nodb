{"version":3,"sources":["../../controllers/parcelControllers.js"],"names":["parcelController","req","res","json","response","parcels","allParcels","newId","length","id","packageName","body","destination","pickupLocation","price","newParcel","currentUser","allUsers","find","user","loggedIn","push","status","message","parcelId","params","findParcel","parcel","newStatus","allCurrentParcels","filter","allparcel"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;IAEMA,gB;;;;;;;;AACF;sCACsBC,G,EAAKC,G,EAAK;AAC5B,mBAAOA,IAAIC,IAAJ,CAAS;AACZC,0BAAU,qDADE;AAEZC,yBAASC;AAFG,aAAT,CAAP;AAIH;;AAED;;;;wCACwBL,G,EAAKC,G,EAAK;AAC9B,gBAAIK,QAAQD,mBAAWA,mBAAWE,MAAX,GAAoB,CAA/B,EAAkCC,EAAlC,GAAuC,CAAnD;AACA,gBAAMC,cAAcT,IAAIU,IAAJ,CAASD,WAA7B;AAAA,gBAA0CE,cAAcX,IAAIU,IAAJ,CAASC,WAAjE;AAAA,gBAA8EC,iBAAiBZ,IAAIU,IAAJ,CAASE,cAAxG;AAAA,gBAAwHC,QAAQb,IAAIU,IAAJ,CAASG,KAAzI;AACA,gBAAMC,YAAY;AACdN,oBAAIF,KADU;AAEdG,wCAFc;AAGdE,wCAHc;AAIdC,8CAJc;AAKdC;AALc,aAAlB;AAOA,gBAAME,cAAcC,kBAASC,IAAT,CAAc,gBAAQ;AACtC,uBAAOC,KAAKC,QAAL,IAAiB,IAAxB;AACH,aAFmB,CAApB;AAGA,gBAAIJ,eAAeD,SAAnB,EAA8B;AAC1BC,4BAAYX,OAAZ,CAAoBgB,IAApB,CAAyBN,SAAzB;AACAT,mCAAWe,IAAX,CAAgBN,SAAhB;AACA,uBAAOb,IAAIoB,MAAJ,CAAW,GAAX,EAAgBnB,IAAhB,CAAqB;AACxBoB,6BAAS;AADe,iBAArB,CAAP;AAGH,aAND,MAMM;AACF,uBAAOrB,IAAIoB,MAAJ,CAAW,GAAX,EAAgBnB,IAAhB,CAAqB;AACxBoB,6BAAS;AADe,iBAArB,CAAP;AAGH;AACJ;;AAED;;;;0CAC0BtB,G,EAAKC,G,EAAK;AAChC,gBAAIsB,WAAWvB,IAAIwB,MAAJ,CAAWhB,EAA1B;AACA,gBAAMiB,aAAapB,mBAAWY,IAAX,CAAgB,kBAAU;AACzC,uBAAOS,OAAOlB,EAAP,IAAae,QAApB;AACH,aAFkB,CAAnB;AAGA,gBAAIE,UAAJ,EAAgB;AACZ,uBAAOxB,IAAIoB,MAAJ,CAAW,GAAX,EAAgBnB,IAAhB,CAAqB;AACxBoB,6BAAS,sBADe;AAExBI,4BAAQD;AAFgB,iBAArB,CAAP;AAIH,aALD,MAKM;AACF,uBAAOxB,IAAIoB,MAAJ,CAAW,GAAX,EAAgBnB,IAAhB,CAAqB;AACxBoB,6BAAS;AADe,iBAArB,CAAP;AAGH;AACJ;AACD;;;;2CAC2BtB,G,EAAKC,G,EAAK;AACjC,gBAAIsB,WAAWvB,IAAIwB,MAAJ,CAAWhB,EAA1B;AACA,gBAAMiB,aAAapB,mBAAWY,IAAX,CAAgB,kBAAU;AACzC,uBAAOS,OAAOlB,EAAP,IAAae,QAApB;AACH,aAFkB,CAAnB;AAGA,gBAAIE,UAAJ,EAAgB;AACZ,oBAAME,YAAY3B,IAAIU,IAAJ,CAASiB,SAA3B;AACA1B,oBAAIoB,MAAJ,CAAW,GAAX,EAAgBnB,IAAhB,CAAqB;AACjBoB,6BAAS;AADQ,iBAArB;AAGA,uBAAOG,WAAWJ,MAAX,GAAoBM,SAA3B;AACH,aAND,MAMM;AACH,uBAAO1B,IAAIoB,MAAJ,CAAW,GAAX,EAAgBnB,IAAhB,CAAqB;AACvBoB,6BAAS;AADc,iBAArB,CAAP;AAGF;AACJ;;AAED;;;;6CAC6BtB,G,EAAKC,G,EAAK;AACnC,gBAAIsB,WAAWvB,IAAIwB,MAAJ,CAAWhB,EAA1B;AACA,gBAAMiB,aAAapB,mBAAWY,IAAX,CAAgB,kBAAU;AACzC,uBAAOS,OAAOlB,EAAP,IAAae,QAApB;AACH,aAFkB,CAAnB;AAGA,gBAAIE,UAAJ,EAAgB;AACZ,oBAAMG,oBAAoBvB,mBAAWwB,MAAX,CAAkB,kBAAU;AAClD,2BAAOH,WAAWD,UAAlB;AACH,iBAFyB,CAA1B;AAGAxB,oBAAIoB,MAAJ,CAAW,GAAX,EAAgBnB,IAAhB,CAAqB;AACjBoB,6BAAS,6BADQ;AAEjBQ,+BAAWF;AAFM,iBAArB;AAIH,aARD,MAQM;AACF,uBAAO3B,IAAIoB,MAAJ,CAAW,GAAX,EAAgBnB,IAAhB,CAAqB;AACxBoB,6BAAS;AADe,iBAArB,CAAP;AAGH;AACJ;;;;;;kBAEUvB,gB","file":"parcelControllers.js","sourcesContent":["import allParcels from '../database/parceldb';\nimport allUsers from '../database/usersdb';\n\nclass parcelController {\n    // this is to get all parcels\n    static getAllParcels (req, res) {\n        return res.json({\n            response: \"you have sent me a get request to get all questions\",\n            parcels: allParcels\n        })\n    }\n\n    // this is to post a particular question\n    static createNewParcel (req, res) {\n        let newId = allParcels[allParcels.length - 1].id + 1;\n        const packageName = req.body.packageName, destination = req.body.destination, pickupLocation = req.body.pickupLocation, price = req.body.price;\n        const newParcel = {\n            id: newId,\n            packageName,\n            destination,\n            pickupLocation,\n            price\n        };\n        const currentUser = allUsers.find(user => {\n            return user.loggedIn == true;\n        })\n        if (currentUser && newParcel) {\n            currentUser.parcels.push(newParcel);\n            allParcels.push(newParcel)\n            return res.status(200).json({\n                message: \"new parcel created\"\n            })\n        }else {\n            return res.status(400).json({\n                message: \"could not add new parcel\"\n            })\n        }\n    }\n\n    // this is to get a specific parcel\n    static getSpecificParcel (req, res) {\n        let parcelId = req.params.id;\n        const findParcel = allParcels.find(parcel => {\n            return parcel.id == parcelId;\n        })\n        if (findParcel) {\n            return res.status(200).json({\n                message: \"the parcel was found\",\n                parcel: findParcel\n            })\n        }else {\n            return res.status(400).json({\n                message: \"sorry the parcel was not found\"\n            })\n        }\n    }\n    // this is to update a parcel order status\n    static updateParcelStatus (req, res) {\n        let parcelId = req.params.id;\n        const findParcel = allParcels.find(parcel => {\n            return parcel.id == parcelId;\n        })\n        if (findParcel) {\n            const newStatus = req.body.newStatus;\n            res.status(200).json({\n                message: \"parcel updated successfully\"\n            })\n            return findParcel.status = newStatus\n        }else {\n           return res.status(400).json({\n                message: \"could not update parcel order\"\n            })\n        }\n    }\n    \n    // this is to delete a specific parcel\n    static deleteSpecificParcel (req, res) {\n        let parcelId = req.params.id;\n        const findParcel = allParcels.find(parcel => {\n            return parcel.id == parcelId;\n        })\n        if (findParcel) {\n            const allCurrentParcels = allParcels.filter(parcel => {\n                return parcel !== findParcel\n            })\n            res.status(200).json({\n                message: \"parcel successfully deleted\",\n                allparcel: allCurrentParcels\n            })\n        }else {\n            return res.status(400).json({\n                message: \"could not delete the parcel\"\n            })\n        }\n    }\n}\nexport default parcelController;"]}