{"version":3,"sources":["../../controllers/parcelControllers.js"],"names":["db","dbManager","parManager","parcelManager","parcelController","req","res","json","response","parcels","allParcels","newId","length","id","packageName","body","destination","pickupLocation","price","newParcel","status","currentUser","helper","findUsers","allUsers","push","message","userId","uId","getAllUsersParcelOrder","err","allUsersParcels","parcelId","params","findParcel","newStatus","allCurrentParcels","filter","parcel","allparcel"],"mappings":"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","file":"parcelControllers.js","sourcesContent":["import allParcels from '../database/parceldb';\nimport allUsers from '../database/usersdb';\nimport helper from '../helpers/findUsers';\nimport parcelManager from './parcelsManager';\nimport dbManager from '../dbManager/dbManager';\n\nconst db = new dbManager();\nconst parManager = new parcelManager(db);\n\nclass parcelController {\n    // this is to get all parcels\n    static getAllParcels (req, res) {\n        return res.json({\n            response: \"you have sent me a get request to get all questions\",\n            parcels: allParcels\n        })\n    }\n\n    // this is to post a particular question\n    static createNewParcel (req, res) {\n        let newId = allParcels[allParcels.length - 1].id + 1;\n        const packageName = req.body.packageName, destination = req.body.destination, pickupLocation = req.body.pickupLocation, price = req.body.price;\n        const newParcel = {\n            id: newId,\n            packageName,\n            destination,\n            pickupLocation,\n            price,\n            status: \"\"\n        };\n        const currentUser = helper.findUsers(allUsers, 'loggedIn', true);\n        if (currentUser && newParcel) {\n            currentUser.parcels.push(newParcel);\n            allParcels.push(newParcel)\n            return res.status(200).json({\n                message: \"new parcel created\"\n            })\n        }else {\n            return res.status(400).json({\n                message: \"could not add new parcel\"\n            })\n        }\n    }\n    // this is to get a specific parcel form a specific user\n    static getParcelByUser(req, res) {\n        let userId = req.body.uId;\n        parManager.getAllUsersParcelOrder(userId, (err, res) => {\n            const allUsersParcels = res;\n            if (err) {\n                return res.status(400).json({\n                    message: 'there was an error in trying to retrieve users parcels'\n                })\n            }else {\n                return res.status(200).json({\n                    message: 'successfully fetched all user parcel',\n                    parcels: res\n                })\n            }\n        })\n    }\n\n    // this is to get a specific parcel\n    static getSpecificParcel (req, res) {\n        let parcelId = req.params.id;\n        // const findParcel = helper.findUsers(allParcels, 'id', parcelId);\n        // if (findParcel) {\n        //     return res.status(200).json({\n        //         message: \"the parcel was found\",\n        //         parcel: findParcel\n        //     })\n        // }else {\n        //     return res.status(400).json({\n        //         message: \"sorry the parcel was not found\"\n        //     })\n        // }\n    }\n    // this is to update a parcel order status\n    static updateParcelStatus (req, res) {\n        let parcelId = req.params.id;\n        const findParcel = helper.findUsers(allParcels, 'id', parcelId);\n        if (findParcel) {\n            const newStatus = req.body.newStatus;\n            res.status(200).json({\n                message: \"parcel updated successfully\"\n            })\n            return findParcel.status = newStatus\n        }else {\n           return res.status(400).json({\n                message: \"could not update parcel order\"\n            })\n        }\n    }\n    \n    // this is to delete a specific parcel\n    static deleteSpecificParcel (req, res) {\n        let parcelId = req.params.id;\n        const findParcel = helper.findUsers(allParcels, 'id', parcelId);\n        if (findParcel) {\n            const allCurrentParcels = allParcels.filter(parcel => {\n                return parcel !== findParcel\n            })\n            res.status(200).json({\n                message: \"parcel successfully deleted\",\n                allparcel: allCurrentParcels\n            })\n        }else {\n            return res.status(400).json({\n                message: \"could not delete the parcel\"\n            })\n        }\n    }\n}\nexport default parcelController;"]}