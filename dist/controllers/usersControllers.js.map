{"version":3,"sources":["../../controllers/usersControllers.js"],"names":["usersControllers","req","res","userEmail","body","email","userName","username","password","newId","allUsers","length","id","checkUser","find","user","newUser","parcels","push","status","json","message","findUser","loggedIn","currentUser","userId","params"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;IAEMA,gB;;;;;;;qCACmBC,G,EAAKC,G,EAAK;AAC3B,gBAAIC,YAAYF,IAAIG,IAAJ,CAASC,KAAzB;AAAA,gBAAgCC,WAAWL,IAAIG,IAAJ,CAASG,QAApD;AAAA,gBAA8DC,WAAWP,IAAIG,IAAJ,CAASI,QAAlF;AACA,gBAAIC,QAAQC,kBAASA,kBAASC,MAAT,GAAkB,CAA3B,EAA8BC,EAA9B,GAAmC,CAA/C;AACA,gBAAMC,YAAYH,kBAASI,IAAT,CAAc,gBAAQ;AACpC,uBAAOC,KAAKV,KAAL,IAAcF,SAArB;AACH,aAFiB,CAAlB;AAGA,gBAAI,CAACU,SAAL,EAAgB;AACZ,oBAAIG,UAAU;AACVJ,wBAAIH,KADM;AAEVJ,2BAAOF,SAFG;AAGVI,8BAAUD,QAHA;AAIVE,8BAAUA,QAJA;AAKVS,6BAAS;AALC,iBAAd;AAOAP,kCAASQ,IAAT,CAAcF,OAAd;AACA,uBAAOd,IAAIiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,6BAAS;AADe,iBAArB,CAAP;AAGH,aAZD,MAYM;AACF,uBAAOnB,IAAIiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,6BAAS;AADe,iBAArB,CAAP;AAGH;AACJ;AACD;;;;8BACcpB,G,EAAKC,G,EAAK;AACpB,gBAAIC,YAAYF,IAAIG,IAAJ,CAASC,KAAzB;AAAA,gBAAgCG,WAAWP,IAAIG,IAAJ,CAASI,QAApD;AACA,gBAAMc,WAAW,yBAAUZ,iBAAV,EAAmB,OAAnB,EAA4BP,SAA5B,CAAjB;AACA,gBAAImB,QAAJ,EAAc;AACVA,yBAASC,QAAT,GAAoB,IAApB;AACA,uBAAOrB,IAAIiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,6BAAS,wBADe;AAExBG,iCAAaF;AAFW,iBAArB,CAAP;AAIH,aAND,MAMM;AACF,uBAAOpB,IAAIiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,6BAAS;AADe,iBAArB,CAAP;AAGH;AACJ;AACD;;;;4CAC4BpB,G,EAAKC,G,EAAK;AAClC,gBAAIuB,SAASxB,IAAIyB,MAAJ,CAAWd,EAAxB;AAEH;AACD;;;;oCACoBX,G,EAAKC,G,EAAK;AAC1B,mBAAOA,IAAIkB,IAAJ,CAAS;AACZV,0BAAUA;AADE,aAAT,CAAP;AAGH;;;;;;kBAGUV,gB","file":"usersControllers.js","sourcesContent":["import allUsers from '../database/usersdb';\nimport findUsers from '../helpers/findUsers';\n\nclass usersControllers {\n    static registerUser (req, res) {\n        let userEmail = req.body.email, userName = req.body.username, password = req.body.password;\n        let newId = allUsers[allUsers.length - 1].id + 1;\n        const checkUser = allUsers.find(user => {\n            return user.email == userEmail\n        })\n        if (!checkUser) {\n            let newUser = {\n                id: newId,\n                email: userEmail,\n                username: userName,\n                password: password,\n                parcels: []\n            };\n            allUsers.push(newUser);\n            return res.status(200).json({\n                message: \"you have been successfully registered\"\n            })\n        }else {\n            return res.status(400).json({\n                message: \"you are already registered\"\n            })\n        }\n    }\n    // this is to login a user\n    static login (req, res) {\n        let userEmail = req.body.email, password = req.body.password;\n        const findUser = findUsers(allUsers,'email', userEmail);\n        if (findUser) {\n            findUser.loggedIn = true;\n            return res.status(200).json({\n                message: \"successfully logged in\",\n                currentUser: findUser\n            })\n        }else {\n            return res.status(400).json({\n                message: \"error logging in\"\n            })\n        }\n    }\n    // this is to get all parcels created by a user\n    static getAllParcelsByUser (req, res) {\n        let userId = req.params.id;\n        \n    }\n    // this is to get all users\n    static getAllUsers (req, res) {\n        return res.json({\n            allUsers: allUsers\n        })\n    }\n}\n\nexport default usersControllers;"]}