{"version":3,"sources":["../../controllers/usersControllers.js"],"names":["dotenv","config","usersControllers","req","res","body","userName","Email","password","userrManager","registerUser","response","console","log","rows","status","user_id","email","username","user","jwt","sign","process","env","SECRET_KEY","err","token","header","json","message","loginUser","undefined","uid","params","getAllUsersParcelOrder","respon","totalNumOfParcels","rowCount","e","allUsers","newdestination","pid","changeParcelDestination"],"mappings":"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","file":"usersControllers.js","sourcesContent":["import jwt from 'jsonwebtoken';\nimport allUsers from '../database/usersdb';\nimport helper from '../helpers/findUsers';\nimport userrManager from './userManager';\nimport dotenv from 'dotenv';\n\ndotenv.config();\n\nclass usersControllers {\n    static async registerUser (req, res) {\n       const { userName, Email, password } = req.body;\n        try {\n            const response = await userrManager.registerUser(userName, Email, password);\n            console.log('user controller reponse', response.rows[0]);  \n            if (response.status !== 400) {\n                const { user_id, email, username } = response.rows[0]; \n                const user = {user_id, email, username};\n                return jwt.sign({user}, process.env.SECRET_KEY, (err, token) => {\n                    if (err) {\n                    return console.log(err)\n                    }else {\n                    return res.header('x-auth-token', token).status(200).json({\n                        message: \"successfully registered user\",\n                        token\n                    })\n                   }\n                });\n            }\n            return res.status(401).json({\n                message: 'unable to register user'\n            })\n        }catch(error) {\n            res.status(401).json({\n                message: 'unable to create user',\n            })\n            console.log('user controller error', error);\n        }\n    }\n    // this is to login a user\n    static async login (req, res) {\n        const { Email, password } = req.body;\n        try {\n            const response = await userrManager.loginUser(Email, password);\n            console.log('LOGIN CONTROLLER response', response);\n            if (response.rows[0] !== undefined) {\n                const { user_id, email, username } = response.rows[0]; \n                const user = {user_id, email, username};\n                return jwt.sign({user}, process.env.SECRET_KEY, (err, token) => {\n                    if (err) {\n                    return console.log(err)\n                    }else {\n                    return res.header('x-auth-token', token).status(200).json({\n                        message: \"successfully logged in\",\n                        token\n                    })\n                   }\n                });\n            }\n            return res.status(401).json({\n                message: 'there was an error logging in'\n            })\n        }catch (e) {\n            res.status(401).json({\n                message: 'error logging in'\n            })\n        }\n    }\n    // this is to get all parcels created by a user\n    static async getAllParcelsByUser (req, res) {\n        const { uid } = req.params;\n        try {\n            const response = await userrManager.getAllUsersParcelOrder(uid);\n            console.log('response',response);\n            return res.status(200).json({\n                message: 'successfully got all user parcels',\n                respon: response.rows,\n                totalNumOfParcels: response.rowCount\n            })     \n        }catch(e) {\n            console.log(e);\n            return res.status(400).json({\n                message: 'could not get parcels',\n                e\n            })\n        }\n    }\n    // this is to get all users\n    static getAllUsers (req, res) {\n        return res.json({\n            allUsers: allUsers\n        })\n    }\n    // this is to change the destination of a parcel order\n    static async updateParcelDestination (req, res) {\n        const { newdestination } = req.body;\n        const { pid, uid } = req.params;\n        try {\n            let response = await userrManager.changeParcelDestination(newdestination, pid, uid);\n            console.log(response);\n            return res.status(200).json({\n                message: \"parcel destination was updated successfully\"\n            })\n        }catch(e) {\n            console.log(e);\n            return res.status(400).json({\n                message: \"this parcel destination was not updated successfully\",\n            })\n        }\n    }\n}\n\nexport default usersControllers;"]}