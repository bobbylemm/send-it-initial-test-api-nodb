{"version":3,"sources":["../../dbManager/dbManager.js"],"names":["dotenv","config","configString","pool","Pool","process","env","NODE_ENV","trim","test","connectionString","development","DbManager","packageName","pickupLocation","dropOfflocation","presentLocation","weight","price","initialStatus","userId","q","query","response","console","log","error","rowCount","email","userName","password","name","newdestination","parcelId","newStatus","newLocation"],"mappings":"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","file":"dbManager.js","sourcesContent":["import { Pool } from 'pg';\nimport dotenv from 'dotenv';\nimport config from '../config/databaseConfiguration';\n\ndotenv.config();\n// const pool = new pg.Pool(config.development);\nlet configString = '';\nconst pool = new Pool(configString);\nif(process.env.NODE_ENV) {\n    if(process.env.NODE_ENV.trim() == 'test') configString = config.test.connectionString;\n    if(process.env.NODE_ENV.trim() == 'development') configString = config.development;\n}\n\nclass DbManager {\n  static async insertNewParcel(packageName, pickupLocation, dropOfflocation, presentLocation, weight, price, initialStatus, userId) {\n        try {\n            const q = 'INSERT INTO parcels (packagename, pickuplocation, dropofflocation, presentlocation, weight, price, status, user_id) VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING *';\n            let response = await pool.query(q, [packageName, pickupLocation, dropOfflocation, presentLocation, weight, price, initialStatus, userId]);\n            console.log(response);\n        }catch(e) {\n            console.error(e)\n        }\n    }\n    // get all parcels\n    static async getAllParcels() {\n        try {\n            const q = 'SELECT packagename, dropofflocation, pickuplocation, price, presentlocation, weight, price, status FROM parcels;';\n            let response = await pool.query(q);\n            console.log(response);\n        }catch(e) {\n            console.error(e)\n        }\n    }\n    // get all parcels by a speciific user\n    static async getAllUserParcels(userId) {\n        try {\n            const q = 'SELECT packageName, destination, pickupLocation, price, userName FROM parcels WHERE user_id = $1';\n            let response = await pool.query(q, [userId]);\n            console.log(response.rowCount);\n            return response\n        }catch(e) {\n            console.error(e);\n            return e;\n        }\n    }\n    // select user if the user exists\n    static async selectUserId(email) {\n        try {\n            const q = 'SELECT user_id FROM users WHERE email=$1';\n            let response = await pool.query(q, [email]);\n            console.log(response);\n            return response;\n        }catch(e) {\n            console.log(e);\n            return e;\n        }\n    }\n    // this is to register a new user\n    static async registerNewUser(userName, email, password) {\n        try {\n            const q = 'INSERT INTO users(userName, email, password) VALUES($1, $2, $3) RETURNING *;';\n            let response = await pool.query(q, [userName, email, password]);\n            console.log(' database response', response);\n            return response;\n        }catch(error) {\n            console.log('error name',error.name)\n        }\n    }\n    // this is to login an existing user\n    static async loginExistingUser(email, password) {\n        try {\n            const q = 'SELECT * FROM users WHERE email=$1 AND password=$2';\n            let response = await pool.query(q, [email, password]);\n            console.log('login response', response);\n            return response;\n        }catch(e) {\n            console.log(e)\n        }\n    }\n    // this is the route to enable a user to update a parcel destination\n    static async updateParcelDestination(newdestination, parcelId, userId) {\n        try {\n            const q = 'UPDATE parcels SET destination=$1 WHERE parcelid=$2 AND userid=$3 RETURNING *;';\n            let response = await pool.query(q, [newdestination, parcelId, userId]);\n            console.log(response);\n        }catch(e) {\n            console.log(e)\n        }\n    }\n    // this is for the admin to change the status of a parcel delivery order and this route should be accessible to admin only\n    static async updateParcelStatus(newStatus, parcelId) {\n        try {\n            const q = 'UPDATE parcels SET status=$1 WHERE parcel_id=$2 RETURNING *;';\n            let response = await pool.query(q, [newStatus, parcelId]);\n            console.log(response);\n        }catch(e) {\n            console.log(e)\n        }\n    }\n    // this is for the admin to change the present location of a parcel delivery order and this route should be accessible to admin only\n    static async updateParcelslocation(newLocation, parcelId) {\n        try {\n            const q = 'UPDATE parcels SET presentlocation=$1 WHERE parcel_id=$2 RETURNING *;';\n            let response = await pool.query(q, [newLocation, parcelId]);\n            console.log(response);\n        }catch(e) {\n            console.log(e)\n        }\n    }\n\n}\nexport default DbManager;"]}